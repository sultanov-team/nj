{:min-bb-version
 "0.6.2"

 :tasks
 {:requires        ([babashka.fs :as fs]
                    [babashka.process :as process]
                    [clojure.string :as str]
                    [clojure.pprint :as pprint])

  :init            (do
                     (defn get-env [s]
                       (System/getenv s))

                     (defn get-property [s]
                       (System/getProperty s))

                     (defn pretty-print [x]
                       (binding [pprint/*print-right-margin* 130]
                         (pprint/pprint x)))

                     (defn execute [command]
                       (-> command (process/tokenize) (process/process) :out slurp str/trim-newline))

                     (def -zone-id (java.time.ZoneId/of "UTC"))
                     (def -datetime-formatter java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
                     (def -current-timestamp (java.time.ZonedDateTime/now -zone-id))
                     (def -build-timestamp (str (.format -current-timestamp -datetime-formatter)))
                     (def -build-number (execute "git rev-list HEAD --count"))
                     (def -git-url (execute "git config --get remote.origin.url"))
                     (def -git-branch (execute "git rev-parse --abbrev-ref HEAD"))
                     (def -git-sha (execute "git rev-parse --short HEAD"))

                     (def -release? (= "main" -git-branch))
                     (def -snapshot? (not -release?))
                     (def -deployable? (contains? #{"main" "develop"} -git-branch))

                     (def -version-template (execute "cat version.tmpl"))
                     (def -version (cond-> (str/replace -version-template "{{build-number}}" -build-number)
                                     -snapshot? (str "-SNAPSHOT")))

                     (def -config
                       {:version         -version
                        :build-number    -build-number
                        :build-timestamp -build-timestamp
                        :git-url         -git-url
                        :git-branch      -git-branch
                        :git-sha         -git-sha})

                     (defn as-params [params]
                       (->> params
                         (seq)
                         (flatten)
                         (map (fn [x]
                                (str/replace (pr-str x) (java.util.regex.Pattern/compile "(\".+\")") "'$1'")))
                         (str/join \space)))

                     (defn with-params [command]
                       (->> -config
                         (as-params)
                         (str command " "))))

  :enter           (let [{:keys [doc print-doc?]
                          :or   {print-doc? true}} (current-task)]
                     (when (and print-doc? doc)
                       (println (str "â–¸ " doc))))

  ;;;;
  ;; Tasks
  ;;;;

  version          {:doc        "[ninja.versioniq] Show version"
                    :print-doc? false
                    :task       (print -version)}

  config           {:doc        "[ninja.versioniq] Show config"
                    :print-doc? false
                    :task       (pretty-print -config)}

  bootstrap        {:doc  "[ninja.versioniq] Setup dependencies"
                    :task (shell "npm i")}

  outdated         {:doc  "[ninja.versioniq] Check for outdated dependencies"
                    :task (do
                            (clojure "-T:build outdated")
                            (shell "npx ncu"))}

  outdated:upgrade {:doc  "[ninja.versioniq] Upgrade outdated dependencies"
                    :task (do
                            (clojure "-T:build outdated:upgrade")
                            (shell "npx ncu -u"))}

  clean            {:doc  "[ninja.versioniq] Cleanup"
                    :task (clojure "-T:build clean")}

  lint             {:doc  "[ninja.versioniq] Run linters"
                    :task (do
                            (shell "cljstyle check src")
                            (shell "clj-kondo --lint src"))}

  lint:fix         {:doc  "[ninja.versioniq] Run linters & fix"
                    :task (shell "cljstyle fix src")}

  repl             {:doc     "[ninja.versioniq] Run REPL"
                    :depends [clean]
                    :task    (clojure (with-params "-T:build repl"))}

  test             {:doc     "[ninja.versioniq] Run tests"
                    :depends [clean]
                    :task    (clojure (with-params "-T:build test"))}

  jar              {:doc     "[ninja.versioniq] Run build jar"
                    :depends [clean]
                    :task    (clojure (with-params "-T:build jar"))}

  uber             {:doc     "[ninja.versioniq] Run build uber"
                    :depends [clean]
                    :task    (clojure (with-params "-T:build uber"))}

  dist             {:doc  "[ninja.versioniq] Make dist"
                    :task (clojure (with-params "-T:build dist"))}

  install          {:doc  "[ninja.versioniq] Install the jar locally"
                    :task (clojure (with-params "-T:build install"))}

  deploy           {:doc  "[ninja.versioniq] Deploy the jar to clojars"
                    :task (clojure (with-params "-T:build deploy"))}}}
